spring:
  application:
    name: query-starter-test

  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration

  security:
    user.password: passwordNotUsed
    datawave:
      jwt.ttl: 3600
      issuers-required: true
      enforce-allowed-callers: false
      allowed-callers:
        - "cn=test keystore, ou=my department, o=my company, st=some-state, c=us<cn=test keystore, ou=my department, o=my company, st=some-state, c=us>"

hazelcast.client.enabled: false

server:
  port: 0
  non-secure-port: 0
  servlet.context-path: /query-starter-test
  ssl:
    client-auth: NEED
    trust-store: 'classpath:testCA.p12'
    trust-store-type: PKCS12
    trust-store-password: 'ChangeIt'
    key-store: 'classpath:testServer.p12'
    key-store-type: PKCS12
    key-store-password: 'ChangeIt'
  outbound-ssl:
    key-store: ${server.ssl.key-store}
    key-store-password: ${server.ssl.key-store-password}
    key-store-type: ${server.ssl.key-store-type}
    trust-store: ${server.ssl.trust-store}
    trust-store-password: ${server.ssl.trust-store-password}
    trust-store-type: ${server.ssl.trust-store-type}

logging:
  level:
    root: warn
    datawave.microservice.query.storage: ERROR
    io.undertow.request: FATAL
    org.apache.kafka: ERROR
    kafka: FATAL

warehouse:
  accumulo:
    zookeepers: 'localhost:2181'
    instanceName: 'my-instance-01'
    username: 'root'
    password: 'password'
  statsd:
    host: localhost
    port: 8125
  tables:
    shard:
      name: 'shard'
    index:
      name: 'shardIndex'
    reverseIndex:
      name: 'shardReverseIndex'
    dateIndex:
      name: 'dateIndex'
    metadata:
      name: 'DatawaveMetadata'
    model:
      name: 'DatawaveMetadata'
  defaults:
    queryThreads: 100
    indexLookupThreads: 100
    dateIndexThreads: 20
    fullTableScanEnabled: false
    baseIteratorPriority: 100
    maxIndexScanTimeMillis: 31536000000
    eventPerDayThreshold: 40000
    shardsPerDayThreshold: 20
    maxTermThreshold: 2000
    maxDepthThreshold: 2000
    maxUnfieldedExpansionThreshold: 50
    maxValueExpansionThreshold: 50
    maxOrExpansionThreshold: 500
    maxOrRangeThreshold: 10
    maxOrExpansionFstThreshold: 750
    maxFieldIndexRangeSplit: 16
    maxIvaratorSources: 20
    maxEvaluationPipelines: 16
    maxPipelineCachedResults: 16
    hdfsSiteConfigURLs: 'file:///etc/hadoop/conf/core-site.xml,file:///etc/hadoop/conf/hdfs-site.xml'
    ivaratorFstHdfsBaseURIs: 'hdfs:///IvaratorCache'
    ivaratorCacheBufferSize: 10000
    ivaratorMaxOpenFiles: 100
    ivaratorCacheScanPersistThreshold: 100000
    ivaratorCacheScanTimeoutMinutes: 60
    modelName: 'DATAWAVE'

datawave:
  metadata:
    all-metadata-auths:
      - PRIVATE,PUBLIC
    type-substitutions:
      "[datawave.data.type.DateType]": "datawave.data.type.RawDateType"

  query:
    metric.client.enabled: false
    parser:
      skipTokenizeUnfieldedFields:
        - "DOMETA"
      tokenizedFields:
        - "CONTENT"
      uuidTypes:
        - fieldName: "EVENT_ID"
          definedView: "LuceneUUIDEventQuery"
          allowedWildcardAfter: 28
        - fieldName: "UUID"
          definedView: "LuceneUUIDEventQuery"
        - fieldName: "PARENT_UUID"
          definedView: "LuceneUUIDEventQuery"
        - fieldName: "PAGE_ID"
          definedView: "LuceneUUIDEventQuery"
        - fieldName: "PAGE_TITLE"
          definedView: "LuceneUUIDEventQuery"
    logic:
      factory:
        enabled: true
        # Uncomment the following line to override the query logic beans to load
        # xmlBeansPath: "classpath:MyTestQueryLogicFactory.xml"

        # The max page size that a user can request.  0 turns off this feature
        maxPageSize: 10000

        # The number of bytes at which a page will be returned, event if the pagesize has not been reached.  0 turns off this feature
        pageByteTrigger: 0
      logics:
        BaseEventQuery:
          accumuloPassword: ${warehouse.accumulo.password}
          tableName: ${warehouse.tables.shard.name}
          dateIndexTableName: ${warehouse.tables.dateIndex.name}
          defaultDateTypeName: "EVENT"
          metadataTableName: ${warehouse.tables.metadata.name}
          indexTableName: ${warehouse.tables.index.name}
          reverseIndexTableName: ${warehouse.tables.reverseIndex.name}
          maxResults: -1
          queryThreads: ${warehouse.defaults.queryThreads}
          indexLookupThreads: ${warehouse.defaults.indexLookupThreads}
          dateIndexThreads: ${warehouse.defaults.dateIndexThreads}
          fullTableScanEnabled: ${warehouse.defaults.fullTableScanEnabled}
          includeDataTypeAsField: false
          disableIndexOnlyDocuments: false
          indexOnlyFilterFunctionsEnabled: false
          includeHierarchyFields: false
          hierarchyFieldOptions:
            "FOO": "BAR"
          baseIteratorPriority: ${warehouse.defaults.baseIteratorPriority}
          maxIndexScanTimeMillis: ${warehouse.defaults.maxIndexScanTimeMillis}
          collapseUids: false
          collapseUidsThreshold: -1
          useEnrichers: true
          contentFieldNames:
            - 'CONTENT'
          realmSuffixExclusionPatterns:
            - '<.*>$'
          minimumSelectivity: .2
          enricherClassNames:
            - 'datawave.query.enrich.DatawaveTermFrequencyEnricher'
          useFilters: false
          filterClassNames:
            - 'foo.bar'
          filterOptions:
            'bar': "foo"
          auditType: "NONE"
          logicDescription: "Retrieve sharded events/documents, leveraging the global index tables as needed"
          eventPerDayThreshold: ${warehouse.defaults.eventPerDayThreshold}
          shardsPerDayThreshold: ${warehouse.defaults.shardsPerDayThreshold}
          maxTermThreshold: ${warehouse.defaults.maxTermThreshold}
          maxDepthThreshold: ${warehouse.defaults.maxDepthThreshold}
          maxUnfieldedExpansionThreshold: ${warehouse.defaults.maxUnfieldedExpansionThreshold}
          maxValueExpansionThreshold: ${warehouse.defaults.maxValueExpansionThreshold}
          maxOrExpansionThreshold: ${warehouse.defaults.maxOrExpansionThreshold}
          maxOrRangeThreshold: ${warehouse.defaults.maxOrRangeThreshold}
          maxOrExpansionFstThreshold: ${warehouse.defaults.maxOrExpansionFstThreshold}
          maxFieldIndexRangeSplit: ${warehouse.defaults.maxFieldIndexRangeSplit}
          maxIvaratorSources: ${warehouse.defaults.maxIvaratorSources}
          maxEvaluationPipelines: ${warehouse.defaults.maxEvaluationPipelines}
          maxPipelineCachedResults: ${warehouse.defaults.maxPipelineCachedResults}
          hdfsSiteConfigURLs: ${warehouse.defaults.hdfsSiteConfigURLs}
          zookeeperConfig: ${warehouse.accumulo.zookeepers}
          ivaratorCacheDirConfigs:
            - basePathURI: "hdfs:///IvaratorCache"
          ivaratorFstHdfsBaseURIs: ${warehouse.defaults.ivaratorFstHdfsBaseURIs}
          ivaratorCacheBufferSize: ${warehouse.defaults.ivaratorCacheBufferSize}
          ivaratorMaxOpenFiles: ${warehouse.defaults.ivaratorMaxOpenFiles}
          ivaratorCacheScanPersistThreshold: ${warehouse.defaults.ivaratorCacheScanPersistThreshold}
          ivaratorCacheScanTimeoutMinutes: ${warehouse.defaults.ivaratorCacheScanTimeoutMinutes}
          eventQueryDataDecoratorTransformer:
            requestedDecorators:
              - "CSV"
              - "WIKIPEDIA"
            dataDecorators:
              "CSV":
                "EVENT_ID": "https://localhost:8443/DataWave/Query/lookupUUID/EVENT_ID?uuid=@field_value@&amp;parameters=data.decorators:CSV"
                "UUID": "https://localhost:8443/DataWave/Query/lookupUUID/UUID?uuid=@field_value@&amp;parameters=data.decorators:CSV"
                "PARENT_UUID": "https://localhost:8443/DataWave/Query/lookupUUID/PARENT_UUID?uuid=@field_value@&amp;parameters=data.decorators:CSV"
              "WIKIPEDIA":
                "PAGE_ID": "https://localhost:8443/DataWave/Query/lookupUUID/PAGE_ID?uuid=@field_value@&amp;parameters=data.decorators:WIKIPEDIA"
                "PAGE_TITLE": "https://localhost:8443/DataWave/Query/lookupUUID/PAGE_TITLE?uuid=@field_value@&amp;parameters=data.decorators:WIKIPEDIA"
          modelTableName: ${warehouse.tables.model.name}
          modelName: ${warehouse.defaults.modelName}
          querySyntaxParsers:
            JEXL: ""
            LUCENE: "LuceneToJexlQueryParser"
            LUCENE-UUID: "LuceneToJexlUUIDQueryParser"
            TOKENIZED-LUCENE: "TokenizedLuceneToJexlQueryParser"
          sendTimingToStatsd: false
          collectQueryMetrics: true
          logTimingDetails: false
          statsdHost: ${warehouse.statsd.host}
          statsdPort: ${warehouse.statsd.port}
          evaluationOnlyFields: ""

audit-client:
  discovery:
    enabled: false
  uri: '${AUDIT_SERVER_URL:http://localhost:11111/audit}'

---

spring.config.activate.on-profile: sync-disabled

query:
  storage:
    syncStorage:
      false

---

spring.config.activate.on-profile: sync-enabled

query:
  storage:
    syncStorage:
      true

---

spring.config.activate.on-profile: send-notifications

query:
  storage:
    sendNotifications:
      true

---

spring.config.activate.on-profile: no-notifications

query:
  storage:
    sendNotifications:
      false

---

spring.config.activate.on-profile: use-rabbit

query:
  storage:
    backend:
      rabbit

---

spring.config.activate.on-profile: use-kafka

spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: KafkaQueryQueueManager
      autoOffsetReset: latest

query:
  storage:
    backend:
      kafka

---

spring.config.activate.on-profile: use-embedded-kafka

spring:
  kafka:
    bootstrap-servers: "${spring.embedded.kafka.brokers}"
    consumer:
      group-id: KafkaQueryQueueManager
      autoOffsetReset: latest
query:
  storage:
    backend:
      kafka

---

spring.config.activate.on-profile: missing

